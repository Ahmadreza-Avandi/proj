version: '3'

services:
  # سرویس Next.js (فرانت‌اند)
  frontend:
    build:
      context: ./next
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
      - "443:443"
    environment:
      - NODE_ENV=production
    volumes:
      - ./certs:/certs
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - app-network

  # سرویس Nest.js (بک‌اند)
  backend:
    build:
      context: ./nest
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=mysql://user:userpassword@mysql:3306/mydatabase
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    restart: unless-stopped
    env_file:
      - ./nest/.env
    depends_on:
      - mysql
      - redis
    networks:
      - app-network

  # سرویس دیتابیس MySQL
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: mydatabase
      MYSQL_USER: user
      MYSQL_PASSWORD: userpassword
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    restart: unless-stopped
    networks:
      - app-network
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci

  # سرویس Redis
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - app-network
    volumes:
      - redis_data:/data

  # سرویس getFace پایتون
  face-detection:
    build:
      context: ./faceDetectionWithCamera
      dockerfile: Dockerfile
    volumes:
      - facedetection_data:/app/data
    ports:
      - "5000:5000"
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

networks:
  app-network:
    driver: bridge

volumes:
  mysql_data:
  redis_data:
  facedetection_data: 